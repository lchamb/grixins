section
  h1.text-center Grixins &equals; Grid Mixins

section
  .row
    .span-12
      .grid-content 12

  .row
    - 2.times do
      .span-6
        .grid-content 6

  .row
    - 3.times do
      .span-4
        .grid-content 4

  .row
    - 4.times do  
      .span-3
        .grid-content 3

  .row
    - 6.times do
      .span-2
        .grid-content 2

  .row
    - 12.times do
      .span-1
        .grid-content 1

  - (1..11).each do |number|
    .row
      div class="span-#{number}"
        .grid-content= number
      div class="span-#{12 - number}"
        .grid-content= 12 - number

section
  h2.text-center Nested Rows

  .row
    .span-6
      .grid-content
        p 6
        .row
          .span-6
            .grid-content 6
          .span-6
            .grid-content 6
    .span-6
      .grid-content
        p 6
        .row
          .span-8
            .grid-content 8
          .span-4
            .grid-content 4

section
  h2.text-center How it all works?
  
  .row
    .span-12
      p.lead Grixins is a pair of SCSS mixins, one for making rows and one for making columns. They are very easy to use.

      p
        strong HTML
      pre.code
        | &lt;section&gt;
            &lt;article&gt;&lt;/article&gt;
            &lt;figure&gt;&lt;/figure&gt;
          &lt;/section&gt;

      p
        strong SCSS
      pre.code
        | section {
            @include row();
          }

          article {
            @include columns(9);
          }

          figure {
            @include columns(3);
          }

      p.lead Each mixin has a couple of options but not too many. You can tell rows to nest.
      
      p
        strong SCSS
      pre.code
        | section {
            @include row();
          }

          section section {
            @include row(nest);
          }

      p.lead Now sections inside other sections wonâ€™t break the grid.

      p.lead Columns have a few options as well. The first option you pass is the number of columns. If you pass nothing it will default to 12. The second option is the number of columns you would like to offset, if any.
      
      p
        strong SCSS
      pre.code
        | article {
            @include columns(8,4);
          }

      p.lead This will create an 8-column span that is offset by 4 columns.
